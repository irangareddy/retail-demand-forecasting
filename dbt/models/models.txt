-- models/staging/stg_stock_prices.sql
{{ config(materialized='view') }}

SELECT
    symbol,
    date::DATE as date,
    open::DECIMAL(10,4) as open,
    high::DECIMAL(10,4) as high,
    low::DECIMAL(10,4) as low,
    close::DECIMAL(10,4) as close,
    volume::BIGINT as volume
FROM {{ source('raw', 'alphavantage_stockprice') }}

-- models/intermediate/int_price_metrics.sql
{{ config(materialized='view') }}

WITH price_data AS (
    SELECT
        symbol,
        date,
        close,
        LAG(close, 1) OVER (PARTITION BY symbol ORDER BY date) as prev_close,
        LAG(close, 5) OVER (PARTITION BY symbol ORDER BY date) as close_5d_ago,
        -- For RSI calculation
        LAG(close, 14) OVER (PARTITION BY symbol ORDER BY date) as close_14d_ago
    FROM {{ ref('stg_stock_prices') }}
),

price_changes AS (
    SELECT
        symbol,
        date,
        close,
        prev_close,
        close_5d_ago,
        (close - prev_close) as price_change,
        ((close - prev_close) / prev_close) * 100 as daily_return,
        ((close - close_5d_ago) / close_5d_ago) * 100 as weekly_return,
        CASE 
            WHEN close > prev_close THEN close - prev_close 
            ELSE 0 
        END as price_gain,
        CASE 
            WHEN close < prev_close THEN ABS(close - prev_close) 
            ELSE 0 
        END as price_loss
    FROM price_data
    WHERE prev_close IS NOT NULL
)

SELECT *
FROM price_changes

-- models/intermediate/int_technical_indicators.sql
{{ config(materialized='view') }}

WITH rsi_calc AS (
    SELECT
        symbol,
        date,
        close,
        price_change,
        AVG(price_gain) OVER (
            PARTITION BY symbol 
            ORDER BY date 
            ROWS BETWEEN 13 PRECEDING AND CURRENT ROW
        ) as avg_gain_14d,
        AVG(price_loss) OVER (
            PARTITION BY symbol 
            ORDER BY date 
            ROWS BETWEEN 13 PRECEDING AND CURRENT ROW
        ) as avg_loss_14d
    FROM {{ ref('int_price_metrics') }}
),

moving_avgs AS (
    SELECT
        symbol,
        date,
        close,
        AVG(close) OVER (
            PARTITION BY symbol 
            ORDER BY date 
            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW
        ) as ma_20,
        AVG(close) OVER (
            PARTITION BY symbol 
            ORDER BY date 
            ROWS BETWEEN 49 PRECEDING AND CURRENT ROW
        ) as ma_50,
        -- Calculate Bollinger Bands
        STDDEV(close) OVER (
            PARTITION BY symbol 
            ORDER BY date 
            ROWS BETWEEN 19 PRECEDING AND CURRENT ROW
        ) as volatility_20d
    FROM {{ ref('stg_stock_prices') }}
)

SELECT
    m.symbol,
    m.date,
    m.close,
    m.ma_20,
    m.ma_50,
    -- RSI Calculation
    CASE 
        WHEN r.avg_loss_14d = 0 THEN 100
        ELSE 100 - (100 / (1 + (r.avg_gain_14d / NULLIF(r.avg_loss_14d, 0))))
    END as rsi_14,
    -- Bollinger Bands
    m.ma_20 + (m.volatility_20d * 2) as upper_band,
    m.ma_20 - (m.volatility_20d * 2) as lower_band
FROM moving_avgs m
LEFT JOIN rsi_calc r
    ON m.symbol = r.symbol 
    AND m.date = r.date

-- models/marts/stock_analytics.sql
{{ config(materialized='table') }}

SELECT
    p.symbol,
    p.date,
    s.open,
    s.high,
    s.low,
    s.close,
    s.volume,
    p.daily_return,
    p.weekly_return,
    t.ma_20,
    t.ma_50,
    t.rsi_14,
    t.upper_band,
    t.lower_band,
    CASE 
        WHEN t.ma_20 > t.ma_50 THEN 'BULLISH'
        ELSE 'BEARISH'
    END as trend_signal,
    CASE 
        WHEN s.close > t.upper_band THEN 'OVERBOUGHT'
        WHEN s.close < t.lower_band THEN 'OVERSOLD'
        ELSE 'NEUTRAL'
    END as bollinger_signal,
    CASE 
        WHEN t.rsi_14 > 70 THEN 'OVERBOUGHT'
        WHEN t.rsi_14 < 30 THEN 'OVERSOLD'
        ELSE 'NEUTRAL'
    END as rsi_signal
FROM {{ ref('int_price_metrics') }} p
JOIN {{ ref('stg_stock_prices') }} s
    ON p.symbol = s.symbol 
    AND p.date = s.date
JOIN {{ ref('int_technical_indicators') }} t
    ON p.symbol = t.symbol 
    AND p.date = t.date